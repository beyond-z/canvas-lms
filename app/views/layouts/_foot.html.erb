<script>
  INST = <%= raw(inst_env.to_json) %>;
  ENV = <%= raw StringifyIds.recursively_stringify_ids(js_env.clone).to_json %>;

  <% unless use_webpack? %>
    // TODO: move this out when we have a single require call
    require = {
      translate: <%= include_js_translations? %>,
      <%-
        # Purposely not using action_controller.asset_host here, since
        # any scripts require.js loads dynamically don't know about the
        # md5 fingerprints to use. Since they don't have a fingerprint
        # it would be unsafe to rely on serving them from an s3 bucket--
        # deploys would overwrite what's there and you'd run into a case
        # where a user talking to a server running old code gets a newer
        # js file than they were expecting.
        # By serving it from the same hostname they loaded the page from, it will
        # have the same version of static assets as the code that host is running.
      %>
      baseUrl: '<%= js_base_url %>',
      paths: <%= raw Canvas::RequireJs.paths(true) %>,
      packages : <%= raw Canvas::RequireJs.packages %>,
      shim: <%= raw Canvas::RequireJs.shims %>,
      map: <%= raw Canvas::RequireJs.map %>,
      waitSeconds: 60
    };
  <% end %>
</script>

<% unless use_webpack? %>
  <%= javascript_include_tag "#{js_base_url}/vendor/require.js" %>
  <% js_bundles.unshift([:common]) if include_common_bundle %>
<% end %>

<%= include_js_bundles %>
<%= include_account_js %>
<%= render_js_blocks %>
<%= render_hidden_dialogs %>

<% if use_webpack? %>
  <script>
    var className = document.documentElement.className;
    document.documentElement.className = className.replace(/scripts-not-loaded/, '');
  </script>
<% else %>
  <script>
  // Determines if the scripts are loaded.
  // When we get everything out of the views, and have a single top-level
  // `require`, this becomes meaningless and will be abandoned.
  (function() {
    var attempts = 0;
    var timeout = 10;
    var check = function() {
      attempts++;
      var done = !window.requirejs.s.contexts._.defQueue.length
      var giveup = attempts === 100; // 1 second
      if (done || giveup) {
        var className = document.documentElement.className;
        document.documentElement.className = className.replace(/scripts-not-loaded/, '');
        return;
      }
      setTimeout(check, timeout);
    };

  check();
}).call(this);
</script>

<div id="bz-tz-warning" style="display: none;">
  We noticed that your current timezone doesn't match your <a href="/profile/settings">settings</a>.
  <br />
  Consider changing your <a href="/profile/settings">settings</a> so your due dates show the right time!
  <br />
  <button type="button" onclick="localStorage.skipTzWarning = 'yes'; this.parentNode.style.display = 'none';">Don't tell me again</button>
</div>

<script>
  var BZ_AuthToken = "<%= form_authenticity_token %>";

  if(ENV["TIMEZONE_OFFSET"] && localStorage.skipTzWarning != "yes" && ENV["current_user_id"] != 1) {
    function showBzTzWarning() {
      var t = document.getElementById("bz-tz-warning");
      if(t)
        t.style.display = "";
    }

    // JS gives minutes, Rails gives seconds, and they come from other directions
    // so the negative and divide make them match up
    var rails_tz = -ENV["TIMEZONE_OFFSET"] / 60;
    var offset = new Date().getTimezoneOffset();
    if(rails_tz != offset) {
      var logInInfo = {};
      if(localStorage.previouslyLoggedIn)
        logInInfo = JSON.parse(localStorage.previouslyLoggedIn);
      if(!logInInfo[ENV["current_user_id"]]) {
        var ajax = new XMLHttpRequest();
        ajax.onload = function() {
          location.reload();
        };
        ajax.open("PUT", "/api/v1/users/" + ENV["current_user_id"] + ".json");
        ajax.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        var data = "authenticity_token=" + encodeURIComponent("<%= form_authenticity_token %>");
        data += "&" + encodeURIComponent("user[time_zone]");
        var skip = false;
        data += "=";
        // Javascript doesn't give us enough information to select
        // this specifically and correctly given the complexities of
        // daylight saving and all the other time zones. So we'll just
        // handle the two US coasts automatically, and ask the user to
        // set it themselves if it is anything else.
        switch(offset) {
          case 300: // eastern standard time
            data += "America/New_York";
          break;
          case 480: // pacific standard
            data += "America/Los_Angeles";
          break;
          default:
            skip = true;
        }
        if(!skip)
          ajax.send(data);
        else
          showBzTzWarning();

        logInInfo[ENV["current_user_id"]] = true;
        localStorage.previouslyLoggedIn = JSON.stringify(logInInfo);
      } else {
        showBzTzWarning();
      }
    }
  }
</script>
<% end %>

<div style="display: none;" id="bz-offline-warning">
  Your data didn't save. Please make sure you are online before continuing.
</div>
<div style="display: none;" id="bz-late-warning">
  You will not receive credit for this module because it is past due.
</div>
<div style="display: none;" id="bz-logged-out-warning">
  You've been logged out and data can't be saved. You'll be redirected to log back in now.
</div>


<script type="application/json" id="my-current-cohort-json"><%= current_cohort.to_json.gsub("/script", "").html_safe %></script>

